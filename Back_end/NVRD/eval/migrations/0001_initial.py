# Generated by Django 3.0.3 on 2020-08-12 09:44

import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_bleach.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('dept', django_bleach.models.BleachField(max_length=50, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$')])),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('fac_id', django_bleach.models.BleachField(max_length=50, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$'), django.core.validators.RegexValidator(message='(-) and white-space not allowed', regex='^[^\\-\\s]*$')])),
                ('name', django_bleach.models.BleachField(max_length=100, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$')])),
                ('email', models.EmailField(max_length=254)),
                ('phone', django_bleach.models.BleachField(max_length=10, validators=[django.core.validators.RegexValidator(message='Invalid Phone Number', regex='^[0-9]{10}$')])),
                ('fac_type', django_bleach.models.BleachField(choices=[('Assistant Professor', 'Assistant Professor'), ('Associate Professor', 'Associate Professor'), ('Professor', 'Professor')], default='Professor', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('mynotes', django_bleach.models.BleachField(blank=True, default='my notes!!, can write a memo upto 1000 characters', max_length=1000, null=True)),
                ('dept', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Department')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Open_Close',
            fields=[
                ('oc_type', django_bleach.models.BleachField(max_length=50, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$')])),
                ('open_time', models.DateTimeField()),
                ('close_time', models.DateTimeField()),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Panel',
            fields=[
                ('panel_year_code', django_bleach.models.BleachField(db_column='panel_year_code', max_length=10, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$'), django.core.validators.RegexValidator(message='(-) and white-space not allowed', regex='^[^\\-\\s]*$')])),
                ('panel_id', django_bleach.models.BleachField(db_column='panel_id', max_length=10, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$')])),
                ('panel_name', django_bleach.models.BleachField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$')])),
                ('is_active', models.BooleanField(default=True)),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'unique_together': {('panel_year_code', 'panel_id')},
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('srn', django_bleach.models.BleachField(max_length=20, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='SRN incorrect', regex='^PES'), django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$'), django.core.validators.RegexValidator(message='(-) and white-space not allowed', regex='^[^\\-\\s]*$')])),
                ('name', django_bleach.models.BleachField(max_length=100, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$')])),
                ('email', models.EmailField(max_length=254)),
                ('phone', django_bleach.models.BleachField(max_length=10, validators=[django.core.validators.RegexValidator(message='Invalid Phone number', regex='^[0-9]{10}$')])),
                ('dept', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Department')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_year_code', django_bleach.models.BleachField(db_column='team_year_code', max_length=10, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$'), django.core.validators.RegexValidator(message='(-) and white-space not allowed', regex='^[^\\-\\s]*$')])),
                ('team_id', django_bleach.models.BleachField(db_column='team_id', max_length=10, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$')])),
                ('team_name', django_bleach.models.BleachField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$')])),
                ('description', django_bleach.models.BleachField(blank=True, max_length=200, null=True, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$')])),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('guide', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='eval.Faculty')),
                ('panel_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='eval.Panel')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Profile_Photo',
            fields=[
                ('srn', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='eval.Student')),
                ('image', models.ImageField(default='static/default_user.png', upload_to='eval/student_images')),
            ],
        ),
        migrations.CreateModel(
            name='TeamFacultyReview',
            fields=[
                ('review_number', models.IntegerField()),
                ('remark', django_bleach.models.BleachField(blank=True, max_length=200, null=True)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('fac_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='eval.Faculty')),
                ('team_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eval.Team')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='student',
            name='team_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='eval.Team'),
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('review_number', models.IntegerField()),
                ('marks', django.contrib.postgres.fields.jsonb.JSONField()),
                ('private_comments', django_bleach.models.BleachField(blank=True, max_length=200, null=True)),
                ('public_comments', django_bleach.models.BleachField(blank=True, max_length=200, null=True)),
                ('is_evaluated', models.BooleanField(default=False)),
                ('id', django_bleach.models.BleachField(max_length=200, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$')])),
                ('fac_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='eval.Faculty')),
                ('srn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eval.Student')),
            ],
        ),
        migrations.CreateModel(
            name='PanelReview',
            fields=[
                ('review_number', models.IntegerField()),
                ('open_time', models.DateTimeField()),
                ('close_time', models.DateTimeField()),
                ('template', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=None, null=True)),
                ('id', django_bleach.models.BleachField(db_column='id', max_length=23, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(message='Invalid Text-Field Input', regex='^[^\\<\\>]*$')])),
                ('panel_id', models.ForeignKey(db_column='panel_id', on_delete=django.db.models.deletion.CASCADE, to='eval.Panel')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FacultyPanel',
            fields=[
                ('is_coordinator', models.BooleanField(default=False)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('fac_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eval.Faculty')),
                ('panel_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eval.Panel')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.AddConstraint(
            model_name='teamfacultyreview',
            constraint=models.CheckConstraint(check=models.Q(review_number__gte=1), name='review_number_gte'),
        ),
        migrations.AddConstraint(
            model_name='teamfacultyreview',
            constraint=models.CheckConstraint(check=models.Q(review_number__lte=5), name='review_number_lte'),
        ),
        migrations.AlterUniqueTogether(
            name='teamfacultyreview',
            unique_together={('team_id', 'fac_id', 'review_number')},
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together={('team_year_code', 'team_id')},
        ),
        migrations.AlterUniqueTogether(
            name='panelreview',
            unique_together={('panel_id', 'review_number')},
        ),
        migrations.AlterUniqueTogether(
            name='facultypanel',
            unique_together={('fac_id', 'panel_id')},
        ),
    ]
