# Generated by Django 3.0.3 on 2020-06-18 15:05

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('dept', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('fac_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=13)),
                ('fac_type', models.CharField(choices=[('assistant_prof', 'assistant_prof'), ('associate_prof', 'associate_prof'), ('professor', 'professor')], default='professor', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('dept', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Department')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Panel',
            fields=[
                ('panel_year_code', models.CharField(db_column='panel_year_code', max_length=10)),
                ('panel_id', models.CharField(db_column='panel_id', max_length=10)),
                ('panel_name', models.CharField(blank=True, db_column='panel_name', max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('ctime', models.DateTimeField(default=django.utils.timezone.now)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'unique_together': {('panel_year_code', 'panel_id')},
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_year_code', models.CharField(db_column='team_year_code', max_length=10)),
                ('team_id', models.CharField(db_column='team_id', max_length=10)),
                ('team_name', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('guide', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Faculty')),
                ('panel_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Panel')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TeamFacultyReview',
            fields=[
                ('review_number', models.IntegerField()),
                ('remark', models.CharField(blank=True, max_length=200, null=True)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('fac_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Faculty')),
                ('team_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Team')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('srn', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=13)),
                ('dept', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Department')),
                ('team_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Team')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Review5',
            fields=[
                ('project_work_results', models.IntegerField()),
                ('quality_of_demo', models.IntegerField()),
                ('project_report', models.IntegerField()),
                ('viva_voce', models.IntegerField()),
                ('comments', models.CharField(blank=True, max_length=200, null=True)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('fac_id', models.ForeignKey(blank=True, db_column='fac_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Faculty')),
                ('srn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eval.Student')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Review4',
            fields=[
                ('project_work_results', models.IntegerField()),
                ('quality_of_demo', models.IntegerField()),
                ('project_report', models.IntegerField()),
                ('viva_voce', models.IntegerField()),
                ('comments', models.CharField(blank=True, max_length=200, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('fac_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Faculty')),
                ('srn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eval.Student')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Review3',
            fields=[
                ('design_philosophy_methodology', models.IntegerField()),
                ('user_interface_design_backend_design_and_design_for_any_algorithms', models.IntegerField(db_column='user_interface_design_backend_algorithms')),
                ('suitably_of_design_in_comparison_to_the_technology_proposed', models.IntegerField()),
                ('progress_of_the_project_work', models.IntegerField()),
                ('viva_voce', models.IntegerField()),
                ('comments', models.CharField(blank=True, max_length=200, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('fac_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Faculty')),
                ('srn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eval.Student')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Review2',
            fields=[
                ('requirements_specification', models.IntegerField()),
                ('user_interface_use_cases', models.IntegerField()),
                ('understanding_of_technology_platform_middleware', models.IntegerField()),
                ('viva_voce', models.IntegerField()),
                ('comments', models.CharField(blank=True, max_length=200, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('fac_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Faculty')),
                ('srn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eval.Student')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Review1',
            fields=[
                ('concept_of_the_work', models.IntegerField()),
                ('methodology_proposed', models.IntegerField()),
                ('literature_survey', models.IntegerField()),
                ('knowledge_on_the_project', models.IntegerField()),
                ('comments', models.CharField(blank=True, max_length=200, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('fac_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eval.Faculty')),
                ('srn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eval.Student')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PanelReview',
            fields=[
                ('review_number', models.IntegerField()),
                ('open_time', models.DateTimeField()),
                ('close_time', models.DateTimeField()),
                ('id', models.CharField(db_column='id', max_length=23, primary_key=True, serialize=False)),
                ('panel_id', models.ForeignKey(db_column='panel_id', on_delete=django.db.models.deletion.CASCADE, to='eval.Panel')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FacultyPanel',
            fields=[
                ('is_coordinator', models.BooleanField(default=False)),
                ('id', models.AutoField(db_column='id', primary_key=True, serialize=False)),
                ('fac_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eval.Faculty')),
                ('panel_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eval.Panel')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.AddConstraint(
            model_name='teamfacultyreview',
            constraint=models.CheckConstraint(check=models.Q(review_number__gte=1), name='review_number_gte'),
        ),
        migrations.AddConstraint(
            model_name='teamfacultyreview',
            constraint=models.CheckConstraint(check=models.Q(review_number__lte=5), name='review_number_lte'),
        ),
        migrations.AlterUniqueTogether(
            name='teamfacultyreview',
            unique_together={('team_id', 'fac_id', 'review_number')},
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together={('team_year_code', 'team_id')},
        ),
        migrations.AddConstraint(
            model_name='student',
            constraint=models.CheckConstraint(check=models.Q(phone__startswith='+'), name='phone_constraint_student'),
        ),
        migrations.AddConstraint(
            model_name='student',
            constraint=models.CheckConstraint(check=models.Q(srn__startswith='PES'), name='srn_constraint'),
        ),
        migrations.AddConstraint(
            model_name='review5',
            constraint=models.CheckConstraint(check=models.Q(('project_work_results__lte', 10), ('project_work_results__gte', 0)), name='5_project_work_results'),
        ),
        migrations.AddConstraint(
            model_name='review5',
            constraint=models.CheckConstraint(check=models.Q(('quality_of_demo__lte', 10), ('quality_of_demo__gte', 0)), name='5_quality_of_demo'),
        ),
        migrations.AddConstraint(
            model_name='review5',
            constraint=models.CheckConstraint(check=models.Q(('project_report__lte', 10), ('project_report__gte', 0)), name='5_project_report'),
        ),
        migrations.AddConstraint(
            model_name='review5',
            constraint=models.CheckConstraint(check=models.Q(('viva_voce__lte', 10), ('viva_voce__gte', 0)), name='5_viva_voce'),
        ),
        migrations.AlterUniqueTogether(
            name='review5',
            unique_together={('srn', 'fac_id')},
        ),
        migrations.AddConstraint(
            model_name='review4',
            constraint=models.CheckConstraint(check=models.Q(('project_work_results__lte', 10), ('project_work_results__gte', 0)), name='4_project_work_results'),
        ),
        migrations.AddConstraint(
            model_name='review4',
            constraint=models.CheckConstraint(check=models.Q(('quality_of_demo__lte', 10), ('quality_of_demo__gte', 0)), name='4_quality_of_demo'),
        ),
        migrations.AddConstraint(
            model_name='review4',
            constraint=models.CheckConstraint(check=models.Q(('project_report__lte', 10), ('project_report__gte', 0)), name='4_project_report'),
        ),
        migrations.AddConstraint(
            model_name='review4',
            constraint=models.CheckConstraint(check=models.Q(('viva_voce__lte', 10), ('viva_voce__gte', 0)), name='4_viva_voce'),
        ),
        migrations.AlterUniqueTogether(
            name='review4',
            unique_together={('srn', 'fac_id')},
        ),
        migrations.AddConstraint(
            model_name='review3',
            constraint=models.CheckConstraint(check=models.Q(('design_philosophy_methodology__lte', 10), ('design_philosophy_methodology__gte', 0)), name='3_design_philosophy_methodology'),
        ),
        migrations.AddConstraint(
            model_name='review3',
            constraint=models.CheckConstraint(check=models.Q(('user_interface_design_backend_design_and_design_for_any_algorithms__lte', 10), ('user_interface_design_backend_design_and_design_for_any_algorithms__gte', 0)), name='3_user_interface_design_backend_design_and_design_for_any_algorithms'),
        ),
        migrations.AddConstraint(
            model_name='review3',
            constraint=models.CheckConstraint(check=models.Q(('suitably_of_design_in_comparison_to_the_technology_proposed__lte', 5), ('suitably_of_design_in_comparison_to_the_technology_proposed__gte', 0)), name='3_suitably_of_design_in_comparison_to_the_technology_proposed'),
        ),
        migrations.AddConstraint(
            model_name='review3',
            constraint=models.CheckConstraint(check=models.Q(('progress_of_the_project_work__lte', 5), ('progress_of_the_project_work__gte', 0)), name='3_progress_of_the_project_work'),
        ),
        migrations.AddConstraint(
            model_name='review3',
            constraint=models.CheckConstraint(check=models.Q(('viva_voce__lte', 5), ('viva_voce__gte', 0)), name='3_viva_voce'),
        ),
        migrations.AlterUniqueTogether(
            name='review3',
            unique_together={('srn', 'fac_id')},
        ),
        migrations.AddConstraint(
            model_name='review2',
            constraint=models.CheckConstraint(check=models.Q(('requirements_specification__lte', 10), ('requirements_specification__gte', 0)), name='2_requirements_specification'),
        ),
        migrations.AddConstraint(
            model_name='review2',
            constraint=models.CheckConstraint(check=models.Q(('user_interface_use_cases__lte', 10), ('user_interface_use_cases__gte', 0)), name='2_user_interface_use_cases'),
        ),
        migrations.AddConstraint(
            model_name='review2',
            constraint=models.CheckConstraint(check=models.Q(('understanding_of_technology_platform_middleware__lte', 10), ('understanding_of_technology_platform_middleware__gte', 0)), name='2_understanding_of_technology_platform_middleware'),
        ),
        migrations.AddConstraint(
            model_name='review2',
            constraint=models.CheckConstraint(check=models.Q(('understanding_of_technology_platform_middleware__lte', 10), ('understanding_of_technology_platform_middleware__gte', 0)), name='2_viva_voce'),
        ),
        migrations.AlterUniqueTogether(
            name='review2',
            unique_together={('srn', 'fac_id')},
        ),
        migrations.AddConstraint(
            model_name='review1',
            constraint=models.CheckConstraint(check=models.Q(('concept_of_the_work__lte', 10), ('concept_of_the_work__gte', 0)), name='1_concept_of_the_work'),
        ),
        migrations.AddConstraint(
            model_name='review1',
            constraint=models.CheckConstraint(check=models.Q(('methodology_proposed__lte', 10), ('methodology_proposed__gte', 0)), name='1_methodology_proposed'),
        ),
        migrations.AddConstraint(
            model_name='review1',
            constraint=models.CheckConstraint(check=models.Q(('literature_survey__lte', 10), ('literature_survey__gte', 0)), name='1_literature_survey'),
        ),
        migrations.AddConstraint(
            model_name='review1',
            constraint=models.CheckConstraint(check=models.Q(('knowledge_on_the_project__lte', 10), ('knowledge_on_the_project__gte', 0)), name='1_knowledge_on_the_project'),
        ),
        migrations.AlterUniqueTogether(
            name='review1',
            unique_together={('srn', 'fac_id')},
        ),
        migrations.AlterUniqueTogether(
            name='panelreview',
            unique_together={('panel_id', 'review_number')},
        ),
        migrations.AlterUniqueTogether(
            name='facultypanel',
            unique_together={('fac_id', 'panel_id')},
        ),
        migrations.AddConstraint(
            model_name='faculty',
            constraint=models.CheckConstraint(check=models.Q(phone__startswith='+'), name='phone_constraint_faculty'),
        ),
    ]
